/**
 * Copyright 2014 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

module.exports = function(RED) {
    "use strict";
	var mpd = require('mpd');
	var util = require('util');
	
    // The main node definition - most things happen in here
    function MpdOutNode(n) {
        // Create a RED node
        RED.nodes.createNode(this,n);

        // Store local copies of the node configuration (as defined in the .html)
        this.topic = n.topic;

        // Do whatever you need to do in here - declare callbacks etc
        // respond to inputs....
		this.server = RED.nodes.getNode(n.server);
		var server = this.server;
		var client = this.server.client;
		this.on('input', function (msg) {
			if(server.connected) {
				var options = [];
				if(msg.options) {
					options = msg.options;
				}
				client.sendCommand(mpd.cmd(msg.payload, options), function(err, msg) {
					if (err) throw err;
				});
			}
		});

        this.on("close", function() {
			//console.log('Destroying Socket');
			//client.socket.destroy();
        });
    }

    // Register the node by name. This must be called before overriding any of the
    // Node functions.
    RED.nodes.registerType("mpd out",MpdOutNode);
	
	// The main node definition - most things happen in here
    function MpdInNode(n) {
        // Create a RED node
        RED.nodes.createNode(this,n);
		var node = this;
        // Store local copies of the node configuration (as defined in the .html)
        this.topic = n.topic;
		this.server = RED.nodes.getNode(n.server);
		
		node.server.client.on('system', function(name) {
			var msg = {};
			node.server.client.sendCommand(mpd.cmd("currentsong", []), function(err, message) {
				if(err) throw err;
				msg.payload = mpd.parseKeyValueMessage(message);
				msg.topic = node.topic;
				node.send(msg);
			});
			/**client.sendCommand(mpd.cmd("status", []), function(err, me) {
				if (err) throw err;
				var msg = {};
				msg.topic = "hans";
				msg.payload = me;
				node.send(msg);
			});*/
		});
        this.on("close", function() {
			//console.log('Destroying Socket');
			//node.server.client.socket.destroy();
        });
    }

    // Register the node by name. This must be called before overriding any of the
    // Node functions.
    RED.nodes.registerType("mpd in",MpdInNode);
	
	var connections = {};
	
    function MpdServerNode(n) {
        RED.nodes.createNode(this,n);
        var node = this;
		node.host = n.host;
        node.port = n.port;
		node.connected = false;
		
		var id = "[" + node.host + ":" + node.port + "]";
		
		if(!connections[id]) {
			connections[id] = mpd.connect({port: node.port, host: node.host});
			var connection = connections[id];
			connection.instances = 1;
			connection.on('error', function(err) { 
				util.log('[MPD] - Error: Connetcion problem? Is the mpd-server running?')
			});
			connection.on('ready', function() {
				util.log('[MPD] - Connected to MPD server ' + node.host + ':' + node.port);
				node.connected = true;
			});
			connection.on('end', function() {
				util.log('[MPD] - Disconnected to MPD server ');
				connection.instances -= 1;
				if(connection.instances <= 0) {
					node.connected = false;
					delete connections[id];
				}
			});
		}
		node.client = connections[id];
		
		this.on("close", function() {
			node.client.socket.destroy();
			connections = {};
		});
		/**
		this.client = null;
		this.client = mpd.connect({port: this.port, host: this.host});
		this.client.on('error', function(err) { 
			util.log('[MPD] - Error: Connetcion problem?')
		});
		var host = this.host;
		var port = this.port;
		var node = this;
		node.connected = false;
		this.client.on('ready', function() {
			util.log('[MPD] - Connected to MPD server ' + host + ':' + port);
			node.connected = true;
		});
		this.client.on('end', function() {
			util.log('[MPD] - Disconnected to MPD server ');
		});*/
    }
    RED.nodes.registerType("mpd-server",MpdServerNode);
}

